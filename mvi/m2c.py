#!/usr/bin/python

## 
# quick and dirty script that generates annotations for segmentation data based on bit mask images from SpotRust
# for import to Maximo Visual Inspection
# questions and patches - mikhail.nikitin1@ibm.com
##

import os
import sys
import imantics
import numpy as np
from PIL import Image, ImageOps

# get the base directory
if len(sys.argv) > 1:
    rootdir = sys.argv[1]
else:
    print('Please specify the base folder')
    exit(1)

with os.scandir(rootdir) as it:
    for entry in it:
        if entry.name.endswith(".jpg") and entry.is_file():
            # for every JPG image check if we've got a mask generated by SpotRust
            mask = os.path.dirname(entry) + "/multimodel_" + os.path.splitext(os.path.basename(entry.path))[0] + "_F-score_nan.png"

            if os.path.isfile(mask):
                image = Image.open(mask)

                # now we take the actual mask at (143,58) x (513, 428) and work on a square 370x370 pixels
                cropped = image.crop((143,58,513,428))

                # now we make it the same size as the original JPEG image 4096x4096 using interpolation
                dim = (4096, 4096)
                resized = cropped.resize(dim, Image.Resampling.BICUBIC)

                gray_image = ImageOps.grayscale(resized)
                resized_grayscale_mask_name = mask+'.resized.png'
                gray_image.save(resized_grayscale_mask_name)

                numpydata = np.asarray(gray_image)

                image2 = imantics.Image.from_path(os.path.abspath(entry))
                image2.add(imantics.Mask(numpydata), category=imantics.Category("Corrosion"))

                # JSON of coco - save annotations
                coco_json = image2.export(style='coco')
                image2.save(rootdir + '/annotation.json', style='coco')
    
              
